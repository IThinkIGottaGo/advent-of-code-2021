package day22

import util.readInput

/**
 * --- 第 22 天：反应堆重启 (Reactor Reboot) ---
 *
 * 在极端的海洋深处作业，潜艇的反应堆已经不堪重负；它需要被重新启动一下。
 *
 * 反应堆的核心由一个大型的 3 维方阵组成，方阵整体又是由多个立方体块组成的，每个整型 3 维坐标 (x,y,z) 都是一个立方块。每个块要么是 **开启 (on)** 的，
 * 要么是 **关闭 (off)** 的；在重启过程的开始，它们全部都是 **关闭** 的。（会不会是 [之前](https://adventofcode.com/2020/day/17) 曾见过的反应堆的一个旧型号？）
 *
 * 为了能够重启反应堆，你只需要根据一系列的 **重启步骤 (reboot steps)** （这便是你的谜题输入）把所有的方块都设成要么全部是 **开启** 的，要么全部是 **关闭** 的。
 * 每个步骤都指定了一个 [长方体范围 (cuboid)](https://en.wikipedia.org/wiki/Cuboid) （由所有坐标落在 x, y 和 z 范围内的立方体组成），
 * 以及是否 **开启** 或 **关闭** 这个长方体范围内所有的立方块。
 *
 * 比如，给定下面这些启动步骤：
 *
 * ```
 * on x=10..12,y=10..12,z=10..12
 * on x=11..13,y=11..13,z=11..13
 * off x=9..11,y=9..11,z=9..11
 * on x=10..10,y=10..10,z=10..10
 * ```
 *
 * 第一步 (`on x=10..12,y=10..12,z=10..12`) **打开** 了一个 3x3x3 的的长方体范围，共计由 27 个立方块组成：
 *
 * - `10,10,10`
 * - `10,10,11`
 * - `10,10,12`
 * - `10,11,10`
 * - `10,11,11`
 * - `10,11,12`
 * - `10,12,10`
 * - `10,12,11`
 * - `10,12,12`
 * - `11,10,10`
 * - `11,10,11`
 * - `11,10,12`
 * - `11,11,10`
 * - `11,11,11`
 * - `11,11,12`
 * - `11,12,10`
 * - `11,12,11`
 * - `11,12,12`
 * - `12,10,10`
 * - `12,10,11`
 * - `12,10,12`
 * - `12,11,10`
 * - `12,11,11`
 * - `12,11,12`
 * - `12,12,10`
 * - `12,12,11`
 * - `12,12,12`
 *
 * 第二步 (`on x=11..13,y=11..13,z=11..13`) **打开** 了一个 3x3x3 的的长方体范围，并且和第一步中有所重叠。结果就是只新增了 19 个打开的立方块；
 * 其余的在第一步中已经打开完毕了。
 *
 * - `11,11,13`
 * - `11,12,13`
 * - `11,13,11`
 * - `11,13,12`
 * - `11,13,13`
 * - `12,11,13`
 * - `12,12,13`
 * - `12,13,11`
 * - `12,13,12`
 * - `12,13,13`
 * - `13,11,11`
 * - `13,11,12`
 * - `13,11,13`
 * - `13,12,11`
 * - `13,12,12`
 * - `13,12,13`
 * - `13,13,11`
 * - `13,13,12`
 * - `13,13,13`
 *
 * 第三步 (`off x=9..11,y=9..11,z=9..11`) **关闭** 了一个 3x3x3 的的长方体范围，并重叠了一些已经打开的方块，最终有 8 个立方块被关闭了：
 *
 * - `10,10,10`
 * - `10,10,11`
 * - `10,11,10`
 * - `10,11,11`
 * - `11,10,10`
 * - `11,10,11`
 * - `11,11,10`
 * - `11,11,11`
 *
 * 最后一步 (`on x=10..10,y=10..10,z=10..10`) 只 **打开** 了一个立方块， `10,10,10` 。在最后这步完成后，总共 **39** 个立方块 **打开** 了。
 *
 * 初始化过程只使用 x, y 和 z 位置在最小 -50 到最大 50 之间的范围。暂时，先忽略这个范围之外的立方块。
 *
 * 下面是一个更大的例子：
 *
 * ```
 * on x=-20..26,y=-36..17,z=-47..7
 * on x=-20..33,y=-21..23,z=-26..28
 * on x=-22..28,y=-29..23,z=-38..16
 * on x=-46..7,y=-6..46,z=-50..-1
 * on x=-49..1,y=-3..46,z=-24..28
 * on x=2..47,y=-22..22,z=-23..27
 * on x=-27..23,y=-28..26,z=-21..29
 * on x=-39..5,y=-6..47,z=-3..44
 * on x=-30..21,y=-8..43,z=-13..34
 * on x=-22..26,y=-27..20,z=-29..19
 * off x=-48..-32,y=26..41,z=-47..-37
 * on x=-12..35,y=6..50,z=-50..-2
 * off x=-48..-32,y=-32..-16,z=-15..-5
 * on x=-18..26,y=-33..15,z=-7..46
 * off x=-40..-22,y=-38..-28,z=23..41
 * on x=-16..35,y=-41..10,z=-47..6
 * off x=-32..-23,y=11..30,z=-14..3
 * on x=-49..-5,y=-3..45,z=-29..18
 * off x=18..30,y=-20..-8,z=-3..13
 * on x=-41..9,y=-7..43,z=-33..15
 * on x=-54112..-39298,y=-85059..-49293,z=-27449..7877
 * on x=967..23432,y=45373..81175,z=27513..53682
 * ```
 *
 * 最后两步已经完全超出了初始化过程的范围之外了；除此之外其他所有步骤都在范围之内。在初始化过程范围中执行完上面这些步骤，总共 **打开** 了 **590784** 个立方块。
 *
 * 第一个问题：执行重启的步骤。另外，只考虑在范围 `x=-50..50,y=-50..50,z=-50..50` 之间的立方块，**有多少个立方块被打开了？**。
 */
fun main() {
    // 第一个问题
    fun part1(input: List<String>): Int {
        TODO()
    }

    // 第二个问题
    fun part2(input: List<String>): Long {
        TODO()
    }

    val testInput = readInput("day22_test")
    check(part1(testInput) == 590784)
//    check(part2(testInput) == )

    val input = readInput("day22")
    println(part1(input))
//    check(part2(input) == )
}