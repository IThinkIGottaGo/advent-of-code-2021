package day23

import util.readInput

/**
 * --- 第 23 天：端足目生物 (Amphipod) ---
 *
 * 一群 [端足目 (amphipods)](https://en.wikipedia.org/wiki/Amphipoda) 生物注意到了你的奇特潜艇，并向你招手。“能有这样一个印象深刻的外壳”，
 * 一只端足目生物说，“你肯定能帮我们解决一个困扰着我们最好的科学家的问题。”
 *
 * 它们接着解释说，有一群胆小的，顽固的端足目生物住在附近的一个洞穴中。在那里生活着 4 种端足目生物： **Amber** (A)， **Bronze** (B)， **Copper** (C)，
 * 和 **Desert** (D)。它们住在由一个 **走廊 (hallway)** 和四个 **侧间 (side rooms)** 组成的洞穴中。侧间最开始住满了端足目生物，并且走廊最开始是空的。
 *
 * 它们给了你一份 **情况图表 (diagram of the situation)**（这便是你的谜题输入），其中包含有每个端足目生物的位置（可以是 A，B，C 或 D，
 * 其中每个都占据了一个原本是开放的空间），墙壁 (`#`)，以及开放空间 (`.`)。
 *
 * 比如：
 *
 * ```
 * #############
 * #...........#
 * ###B#C#B#D###
 *   #A#D#C#A#
 *   #########
 * ```
 *
 * 这些端足目的小动物们想要有一种方法可以把每只端足目生物都移动到侧间中，这样每个侧间中就只有同一种类型的端足目生物，并且还要按照从左到右以 `A-D` 的顺序排列，比如像下面这样：
 *
 * ```
 * #############
 * #...........#
 * ###A#B#C#D###
 *   #A#B#C#D#
 *   #########
 * ```
 *
 * 只要端足目生物们移动到一个未被占据的开放空间中，它们就可以向上、向下、向左，或向右移动。每种类型的端足目在每次移动时都会需要不同数量的 **能量 (energy)** 来移动：
 * Amber 类型的端足目每次移动需要 1 点能量，Bronze 类型的端足目每次移动需要 10 点能量，Copper 类型的端足目每次移动需要 100 点，以及 Desert 类型的每次需要 1000 点。
 * 端足目生物们希望你能找到一种所需 **总能量最少** 的移动方式。
 *
 * 但是，因为它们既胆小又顽固，端足目生物们还有一些额外的规则：
 *
 * - 端足目生物们绝对不会 **离开任何房间后就立刻在空间中停下来**。只要它们立刻继续移动，它们就可以移动到下一个空间。（具体的说，指的就是在这些端足目生物起始位置直接上方的，
 * 在走廊中的 4 个开放空间。）
 * - 端足目生物们绝对不会 **从走廊跑进某个房间中** ，除非那个房间就是自己的目的地， **并且** 那些没有端足目生物所在的房间也不会成为自己的目的地。
 * 如果某个端足目生物开始的房间不是自己的目的地房间，在它离开房间之前，它都可以一直待在那个房间里。（比如，一个 Amber 类型的端足目生物将不会从走廊移动到右侧三个房间中，
 * 并且如果最左侧的房间是空的，或者该最左侧房间只有其他 Amber 类型的端足目生物时，它才会移动到最左侧的房间中。）
 * - 一旦某个端足目生物在走廊中停止移动， **它就会一直停在那里，直到它可以移动到某个房间为止**。（即一旦任何端足目生物开始移动了，任何走廊中的其他端足目生物都会锁定在那个位置，
 * 并在它们可以完全移动到某个房间之前都不再会进行移动。）
 *
 * 在上面的例子中，端足目生物们可以使用最少 **12521** 点的能量就能完成整个移动过程。下面展示了一种移动的方式：
 *
 * 起始配置：
 *
 * ```
 * #############
 * #...........#
 * ###B#C#B#D###
 *   #A#D#C#A#
 *   #########
 * ```
 *
 * 一个 Bronze 类型的端足目移动到走廊中，花费 4 步并使用了 40 点能量。
 *
 * ```
 * #############
 * #...B.......#
 * ###B#C#.#D###
 *   #A#D#C#A#
 *   #########
 * ```
 *
 * 唯一一个不在它应该在的房间的 Copper 类型端足目移动到它应该所在的房间中，花费 4 步并使用了 400 点能量：
 *
 * ```
 * #############
 * #...B.......#
 * ###B#.#C#D###
 *   #A#D#C#A#
 *   #########
 * ```
 *
 * 一个 Desert 类型的端足目生物移动，花费 3 步并使用了 3000 点能量，然后走廊上的 Bronze 类型的端足目占据了它原本的位置，花费 3 步并使用了 30 点能量：
 *
 * ```
 * #############
 * #.....D.....#
 * ###B#.#C#D###
 *   #A#B#C#A#
 *   #########
 * ```
 *
 * 最左侧房间中的 Bronze 端足目移动到它的房间中并使用了 40 点能量：
 *
 * ```
 * #############
 * #.....D.....#
 * ###.#B#C#D###
 *   #A#B#C#A#
 *   #########
 * ```
 *
 * 最右侧房间中间的两个端足目都移动到走廊中，总共使用了 2003 点能量：
 *
 * ```
 * #############
 * #.....D.D.A.#
 * ###.#B#C#.###
 *   #A#B#C#.#
 *   #########
 * ```
 *
 * 两个 Desert 类型的端足目移动到最右侧的房间中并使用了 7000 点能量：
 *
 * ```
 * #############
 * #.........A.#
 * ###.#B#C#D###
 *   #A#B#C#D#
 *   #########
 * ```
 *
 * 最终，最后的 Amber 类型的端足目移动到它的房间中，使用了 8 点能量：
 *
 * ```
 * #############
 * #...........#
 * ###A#B#C#D###
 *   #A#B#C#D#
 *   #########
 * ```
 *
 * 第一个问题：**组织这些端足目所需的最少的能量是多少？**
 *
 * --- 第二部分 ---
 *
 * 正在你准备给端足目生物们提供你的解答时，你注意到它们给你的图表其实是折叠起来的。正当你展开它的时候，你发现了图表中还有一部分。
 *
 * 在包含端足目生物们开始位置的第一行和第二行之间，插入了下面这两行内容：
 *
 * ```
 * #D#C#B#A#
 * #D#B#A#C#
 * ```
 *
 * 所以，上面的例子就变成了：
 *
 * ```
 * #############
 * #...........#
 * ###B#C#B#D###
 *   #D#C#B#A#
 *   #D#B#A#C#
 *   #A#D#C#A#
 *   #########
 * ```
 *
 * 端足目生物们依然想把房间组织成之前相似的样子：
 *
 * ```
 * #############
 * #...........#
 * ###A#B#C#D###
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #########
 * ```
 *
 * 在这个新的例子中，要组织这些端足目生物的所需最少能量是 **44169**。
 *
 * ```
 * #############
 * #...........#
 * ###B#C#B#D###
 *   #D#C#B#A#
 *   #D#B#A#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #..........D#
 * ###B#C#B#.###
 *   #D#C#B#A#
 *   #D#B#A#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #A.........D#
 * ###B#C#B#.###
 *   #D#C#B#.#
 *   #D#B#A#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #A........BD#
 * ###B#C#.#.###
 *   #D#C#B#.#
 *   #D#B#A#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #A......B.BD#
 * ###B#C#.#.###
 *   #D#C#.#.#
 *   #D#B#A#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #AA.....B.BD#
 * ###B#C#.#.###
 *   #D#C#.#.#
 *   #D#B#.#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #AA.....B.BD#
 * ###B#.#.#.###
 *   #D#C#.#.#
 *   #D#B#C#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #AA.....B.BD#
 * ###B#.#.#.###
 *   #D#.#C#.#
 *   #D#B#C#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #AA...B.B.BD#
 * ###B#.#.#.###
 *   #D#.#C#.#
 *   #D#.#C#C#
 *   #A#D#C#A#
 *   #########
 *
 * #############
 * #AA.D.B.B.BD#
 * ###B#.#.#.###
 *   #D#.#C#.#
 *   #D#.#C#C#
 *   #A#.#C#A#
 *   #########
 *
 * #############
 * #AA.D...B.BD#
 * ###B#.#.#.###
 *   #D#.#C#.#
 *   #D#.#C#C#
 *   #A#B#C#A#
 *   #########
 *
 * #############
 * #AA.D.....BD#
 * ###B#.#.#.###
 *   #D#.#C#.#
 *   #D#B#C#C#
 *   #A#B#C#A#
 *   #########
 *
 * #############
 * #AA.D......D#
 * ###B#.#.#.###
 *   #D#B#C#.#
 *   #D#B#C#C#
 *   #A#B#C#A#
 *   #########
 *
 * #############
 * #AA.D......D#
 * ###B#.#C#.###
 *   #D#B#C#.#
 *   #D#B#C#.#
 *   #A#B#C#A#
 *   #########
 *
 * #############
 * #AA.D.....AD#
 * ###B#.#C#.###
 *   #D#B#C#.#
 *   #D#B#C#.#
 *   #A#B#C#.#
 *   #########
 *
 * #############
 * #AA.......AD#
 * ###B#.#C#.###
 *   #D#B#C#.#
 *   #D#B#C#.#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #AA.......AD#
 * ###.#B#C#.###
 *   #D#B#C#.#
 *   #D#B#C#.#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #AA.......AD#
 * ###.#B#C#.###
 *   #.#B#C#.#
 *   #D#B#C#D#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #AA.D.....AD#
 * ###.#B#C#.###
 *   #.#B#C#.#
 *   #.#B#C#D#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #A..D.....AD#
 * ###.#B#C#.###
 *   #.#B#C#.#
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #...D.....AD#
 * ###.#B#C#.###
 *   #A#B#C#.#
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #.........AD#
 * ###.#B#C#.###
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #..........D#
 * ###A#B#C#.###
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #########
 *
 * #############
 * #...........#
 * ###A#B#C#D###
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #A#B#C#D#
 *   #########
 * ```
 *
 * 第二个问题：从完整的图表中使用初始配置，**组织这些端足目所需的最少的能量是多少？**
 */
fun main() {
    // 第一个问题
    fun part1(input: List<String>): Int {
        TODO()
    }

    // 第二个问题
    fun part2(input: List<String>): Int {
        TODO()
    }

    val testInput1 = readInput("day23_test1")
    check(part1(testInput1) == 12521)
    val testInput2 = readInput("day23_test2")
    check(part2(testInput2) == 44169)

    val input1 = readInput("day23_1")
//    check(part1(input) == )
    val input2 = readInput("day23_2")
//    check(part2(input) == )
}