package day19

import util.readInput

/**
 * --- 第 19 天：信标扫描器 ---
 *
 * 当你的 [探测仪(probe)](https://adventofcode.com/2021/day/17) 漂降过这片区域时，它向水中释放了各种各样的 **信标 (beacons)** 和 **扫描器 (scanners)** 。
 * 在漆黑海沟的开阔水域中导航是非常困难的，但如果你可以借助扫描器的数据来绘制一份海沟的地图，应该就可以安全的抵达海底了。
 *
 * 信标和扫描器一动不动的漂浮在水中；它们设计出来就是为了能够长时间的保持相同位置的。每个扫描器都可以以自身为中心，在一个大的立方体范围中，
 * 侦测到所有属于这个范围中的信标；在三轴 (`x`, `y` 和 `z`) 中的每个轴都确定了信标相对于扫描器的精确位置，且扫描器能侦测到的信标在三轴中的每个轴正负方向各最多
 * 1000 个单位远。但是扫描器不能侦测到其他的扫描器。潜艇已经自动统计了由每个扫描器侦测到的各个信标的相对位置（这便是你的谜题输入）。
 *
 * 比如，如果某个扫描器的 `x,y,z` 坐标是 `500,0,-500` 并且各有信标在 `-500,1000,-1500` 和 `1501,0,-500` 坐标处，那么扫描器就可以报告第一个信标的坐标位于 `-1000,1000,-1000`
 * (相对于扫描器而言)，但却完全侦测不到第二个信标。
 *
 * 不幸的是，尽管每个扫描器都可以报告所有侦测到的信标相对于它自己的位置，但 **扫描器自己却不知道它们自己的位置**。因此你需要自己来确定信标和扫描器的位置。
 *
 * 扫描器和信标构成了一个连续的 3 维区域。这个区域可以通过找出成配对的扫描器来重建，这些成配对的扫描器必须要有重叠的区域，且在它们重叠的区域中能检测到有 **至少 12 个信标**
 * 存在，如是则说明它们是成配对的。通过这 12 个共同的信标，你就可以精确的确定扫描器相对于另一个扫描器的位置了，从而一次一个扫描器的来重建信标地图。
 *
 * 暂时，先只考虑两个方向。假设你有下面这样的扫描器报告：
 *
 * ```
 * --- scanner 0 ---
 * 0,2
 * 4,1
 * 3,3
 *
 * --- scanner 1 ---
 * -1,-1
 * -5,0
 * -2,1
 * ```
 *
 * 以 `x` 向右为正， `y` 向上为正， `S` 为扫描器位置， `B` 为信标的位置，扫描器 0 侦测绘制如下：
 *
 * ```
 * ...B.
 * B....
 * ....B
 * S....
 * ```
 *
 * 扫描器 1 侦测绘制如下：
 *
 * ```
 * ...B..
 * B....S
 * ....B.
 * ```
 *
 * 以上述例子，假设扫描器只需要 3 个重叠的信标。然后，这些信标都在扫描器的重叠区域中，对这两个扫描器可见，将会产生下面这个完整的地图：
 *
 * ```
 * ...B..
 * B....S
 * ....B.
 * S.....
 * ```
 *
 * 不幸的是，这里还有第二个问题：这些扫描器也不知道它们的 **朝向或者说面对的方向** 。由于磁力校准的作用，每个扫描仪都在其全部 `x`, `y` 和 `z`
 * 轴上旋转了若干整数倍个 90 度，也就是说，某个扫描器可能称某个方向为正 `x`, 而在另一个扫描器中这个同样方向就成了负 `y` 。或者，这两个扫描器都称同一个方向为正
 * `x`, 但其中某个扫描器在另一个扫描器看来可能是倒了个个 (upside-down) 的。最终，每个扫描器都可以处于任意 24 个不同方向中的某一种：即 `x`, `y` 或 `z`
 * 轴上的或正或负，以及考虑其四个面对方向中到底哪个方向是 **"朝上"** 。
 *
 * 比如，下面是一个从扫描器所看到的信标在相同的位置，但不同的面向上的信标排列：
 *
 * ```
 * --- scanner 0 ---
 * -1,-1,1
 * -2,-2,2
 * -3,-3,3
 * -2,-3,1
 * 5,6,-4
 * 8,0,7
 *
 * --- scanner 0 ---
 * 1,-1,1
 * 2,-2,2
 * 3,-3,3
 * 2,-1,3
 * -5,4,-6
 * -8,-7,0
 *
 * --- scanner 0 ---
 * -1,-1,-1
 * -2,-2,-2
 * -3,-3,-3
 * -1,-3,-2
 * 4,6,5
 * -7,0,8
 *
 * --- scanner 0 ---
 * 1,1,-1
 * 2,2,-2
 * 3,3,-3
 * 1,3,-2
 * -4,-6,5
 * 7,0,8
 *
 * --- scanner 0 ---
 * 1,1,1
 * 2,2,2
 * 3,3,3
 * 3,1,2
 * -6,-4,-5
 * 0,7,-8
 * ```
 *
 * 通过找出都能看到至少 12 个相同信标的成配对的扫描器，你就可以组装整个地图了。比如，考虑下面这个报告：
 *
 * ```
 * --- scanner 0 ---
 * 404,-588,-901
 * 528,-643,409
 * -838,591,734
 * 390,-675,-793
 * -537,-823,-458
 * -485,-357,347
 * -345,-311,381
 * -661,-816,-575
 * -876,649,763
 * -618,-824,-621
 * 553,345,-567
 * 474,580,667
 * -447,-329,318
 * -584,868,-557
 * 544,-627,-890
 * 564,392,-477
 * 455,729,728
 * -892,524,684
 * -689,845,-530
 * 423,-701,434
 * 7,-33,-71
 * 630,319,-379
 * 443,580,662
 * -789,900,-551
 * 459,-707,401
 *
 * --- scanner 1 ---
 * 686,422,578
 * 605,423,415
 * 515,917,-361
 * -336,658,858
 * 95,138,22
 * -476,619,847
 * -340,-569,-846
 * 567,-361,727
 * -460,603,-452
 * 669,-402,600
 * 729,430,532
 * -500,-761,534
 * -322,571,750
 * -466,-666,-811
 * -429,-592,574
 * -355,545,-477
 * 703,-491,-529
 * -328,-685,520
 * 413,935,-424
 * -391,539,-444
 * 586,-435,557
 * -364,-763,-893
 * 807,-499,-711
 * 755,-354,-619
 * 553,889,-390
 *
 * --- scanner 2 ---
 * 649,640,665
 * 682,-795,504
 * -784,533,-524
 * -644,584,-595
 * -588,-843,648
 * -30,6,44
 * -674,560,763
 * 500,723,-460
 * 609,671,-379
 * -555,-800,653
 * -675,-892,-343
 * 697,-426,-610
 * 578,704,681
 * 493,664,-388
 * -671,-858,530
 * -667,343,800
 * 571,-461,-707
 * -138,-166,112
 * -889,563,-600
 * 646,-828,498
 * 640,759,510
 * -630,509,768
 * -681,-892,-333
 * 673,-379,-804
 * -742,-814,-386
 * 577,-820,562
 *
 * --- scanner 3 ---
 * -589,542,597
 * 605,-692,669
 * -500,565,-823
 * -660,373,557
 * -458,-679,-417
 * -488,449,543
 * -626,468,-788
 * 338,-750,-386
 * 528,-832,-391
 * 562,-778,733
 * -938,-730,414
 * 543,643,-506
 * -524,371,-870
 * 407,773,750
 * -104,29,83
 * 378,-903,-323
 * -778,-728,485
 * 426,699,580
 * -438,-605,-362
 * -469,-447,-387
 * 509,732,623
 * 647,635,-688
 * -868,-804,481
 * 614,-800,639
 * 595,780,-596
 *
 * --- scanner 4 ---
 * 727,592,562
 * -293,-554,779
 * 441,611,-461
 * -714,465,-776
 * -743,427,-804
 * -660,-479,-426
 * 832,-632,460
 * 927,-485,-438
 * 408,393,-506
 * 466,436,-512
 * 110,16,151
 * -258,-428,682
 * -393,719,612
 * -211,-452,876
 * 808,-476,-593
 * -575,615,604
 * -485,667,467
 * -680,325,-822
 * -627,-443,-432
 * 872,-547,-609
 * 833,512,582
 * 807,604,487
 * 839,-516,451
 * 891,-625,532
 * -652,-548,-490
 * 30,-46,-14
 * ```
 *
 * 在这个例子中，因为所有的坐标都是相对的，因此所有 “绝对” 位置都能够相对于扫描器 0 来予以表示 (通过使用扫描器 0 的朝向，让扫描器 0 看起来就像是坐标 `0,0,0`).
 *
 * 扫描器 0 和扫描器 1 有重叠的侦测块；它们共同侦测到的 12 个信标（坐标相对于扫描器 0 展示）位于下面这个坐标中：
 *
 * ```
 * -618,-824,-621
 * -537,-823,-458
 * -447,-329,318
 * 404,-588,-901
 * 544,-627,-890
 * 528,-643,409
 * -661,-816,-575
 * 390,-675,-793
 * 423,-701,434
 * -345,-311,381
 * 459,-707,401
 * -485,-357,347
 * ```
 *
 * 下面是和上面同样的 12 个信标（且以相同的顺序），只是这次是从扫描器 1 的角度而言：
 *
 * ```
 * 686,422,578
 * 605,423,415
 * 515,917,-361
 * -336,658,858
 * -476,619,847
 * -460,603,-452
 * 729,430,532
 * -322,571,750
 * -355,545,-477
 * 413,935,-424
 * -391,539,-444
 * 553,889,-390
 * ```
 *
 * 因为这个结果，所以扫描器 1 必定位于 `68,-1246,-43` （坐标相对于扫描器 0）。
 *
 * 扫描器 4 则和扫描器 1 重叠；它们共同检测到的 12 个信标是（坐标相对于扫描器 0）：
 *
 * ```
 * 459,-707,401
 * -739,-1745,668
 * -485,-357,347
 * 432,-2009,850
 * 528,-643,409
 * 423,-701,434
 * -345,-311,381
 * 408,-1815,803
 * 534,-1912,768
 * -687,-1600,576
 * -447,-329,318
 * -635,-1737,486
 * ```
 *
 * 所以，扫描器 4 则位于 `-20,-1133,1061` （坐标相对于扫描器 0）。
 *
 * 按照这样的过程，扫描器 2 必定位于 `1105,-1205,1229` 并且扫描器 3 必定是 `-92,-2380,-20` （坐标均相对于扫描器 0）。
 *
 * 现在整个信标的坐标图如下（坐标相对于扫描器 0）：
 *
 * ```
 * -892,524,684
 * -876,649,763
 * -838,591,734
 * -789,900,-551
 * -739,-1745,668
 * -706,-3180,-659
 * -697,-3072,-689
 * -689,845,-530
 * -687,-1600,576
 * -661,-816,-575
 * -654,-3158,-753
 * -635,-1737,486
 * -631,-672,1502
 * -624,-1620,1868
 * -620,-3212,371
 * -618,-824,-621
 * -612,-1695,1788
 * -601,-1648,-643
 * -584,868,-557
 * -537,-823,-458
 * -532,-1715,1894
 * -518,-1681,-600
 * -499,-1607,-770
 * -485,-357,347
 * -470,-3283,303
 * -456,-621,1527
 * -447,-329,318
 * -430,-3130,366
 * -413,-627,1469
 * -345,-311,381
 * -36,-1284,1171
 * -27,-1108,-65
 * 7,-33,-71
 * 12,-2351,-103
 * 26,-1119,1091
 * 346,-2985,342
 * 366,-3059,397
 * 377,-2827,367
 * 390,-675,-793
 * 396,-1931,-563
 * 404,-588,-901
 * 408,-1815,803
 * 423,-701,434
 * 432,-2009,850
 * 443,580,662
 * 455,729,728
 * 456,-540,1869
 * 459,-707,401
 * 465,-695,1988
 * 474,580,667
 * 496,-1584,1900
 * 497,-1838,-617
 * 527,-524,1933
 * 528,-643,409
 * 534,-1912,768
 * 544,-627,-890
 * 553,345,-567
 * 564,392,-477
 * 568,-2007,-577
 * 605,-1665,1952
 * 612,-1593,1893
 * 630,319,-379
 * 686,-3108,-505
 * 776,-3184,-501
 * 846,-3110,-434
 * 1135,-1161,1235
 * 1243,-1093,1063
 * 1660,-552,429
 * 1693,-557,386
 * 1735,-437,1738
 * 1749,-1800,1813
 * 1772,-405,1572
 * 1776,-675,371
 * 1779,-442,1789
 * 1780,-1548,337
 * 1786,-1538,337
 * 1847,-1591,415
 * 1889,-1729,1762
 * 1994,-1805,1792
 * ```
 *
 * 总计，有 **79** 个信标。
 *
 * 第一个问题：构建信标的完整地图。**总共有多少个信标在？**
 *
 * --- 第二部分 ---
 *
 * 有时候，必须要感叹大海之大。若使用 [曼哈顿距离 (Manhattan distance)](https://en.wikipedia.org/wiki/Taxicab_geometry),
 * 那么扫描器之间的距离有多远呢？
 *
 * 在上面的例子中，扫描器 2 (`1105,-1205,1229`) 和 3 (`-92,-2380,-20`) 之间的曼哈顿距离是最大的。总计，它们相距 1197 + 1175 + 1249 =
 * **3621** 个单位远。
 *
 * 第二个问题：**任意两扫描器之间，最大的曼哈顿距离是多少？**
 */
fun main() {
    // 第一个问题
    fun part1(input: List<String>): Int {
        TODO()
    }

    // 第二个问题
    fun part2(input: List<String>): Int {
        TODO()
    }

    val testInput = readInput("day19_test")
    check(part1(testInput) == 79)
//    check(part2(testInput) == )

    val input = readInput("day19")
    check(part1(input) == 3621)
//    check(part2(input) == )
}